// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    BigInt            @id @default(autoincrement())
  fullname              String            @db.VarChar(255)
  email                 String            @db.VarChar(255)
  password              String            @db.VarChar(255)
  created_at            DateTime          @default(now()) @db.DateTime
  updated_at            DateTime          @updatedAt @db.DateTime
  deleted               Boolean           @default(false)

  //Relations

  courses             Course[]
  course_resources    CourseResource[]
  user_course_progress UserCourseProgress[]
  user_chapter_progress UserChapterProgress[]
  user_quiz_attempts  UserQuizAttempt[]
  user_responses      UserResponse[]

  @@map("users")
}

model Course {
  id                  BigInt               @id @default(autoincrement())
  user_id             BigInt
  title               String               @db.VarChar(255)
  youtube_url         String               @db.VarChar(255)
  created_at          DateTime             @default(now()) @db.DateTime
  completed_at        DateTime?            @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  user                User                 @relation(fields: [user_id], references: [id])
  chapters            Chapter[]
  course_resources    CourseResource[]
  user_course_progress UserCourseProgress[]

  @@map("courses")
}

model Chapter {
  id                  BigInt               @id @default(autoincrement())
  course_id           BigInt
  title               String               @db.VarChar(255)
  description         String?              @db.VarChar(255)
  chapter_number      BigInt
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  course              Course               @relation(fields: [course_id], references: [id])
  quizzes             Quiz[]
  user_chapter_progress UserChapterProgress[]

  @@map("chapters")
}

model Quiz {
  id                  BigInt               @id @default(autoincrement())
  chapter_id          BigInt
  passing_score       BigInt
  time_limit_secs     BigInt
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  chapter             Chapter              @relation(fields: [chapter_id], references: [id])
  questions           Question[]
  user_quiz_attempts  UserQuizAttempt[]

  @@map("quizzes")
}

model Question {
  id                  BigInt               @id @default(autoincrement())
  quiz_id             BigInt
  question_text       String               @db.VarChar(255)
  question_type       QuestionType
  points              BigInt
  question_number     BigInt
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  quiz                Quiz                 @relation(fields: [quiz_id], references: [id])
  options             Option[]
  user_responses      UserResponse[]
  written_answers     WrittenAnswer[]

  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  WRITTEN
}

model Option {
  id                  BigInt               @id @default(autoincrement())
  question_id         BigInt
  option_text         String               @db.VarChar(255)
  options_number      BigInt
  is_correct          Boolean
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  question            Question             @relation(fields: [question_id], references: [id])
  user_responses      UserResponse[]

  @@map("options")
}

model WrittenAnswer {
  id                  BigInt               @id @default(autoincrement())
  question_id         BigInt
  answer              String               @db.VarChar(255)
  match_percentage    Float
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  question            Question             @relation(fields: [question_id], references: [id])

  @@map("written_answers")
}

model UserCourseProgress {
  id                    BigInt             @id @default(autoincrement())
  user_id               BigInt
  course_id             BigInt
  completion_percentage Float
  is_complete           Boolean
  current_chapter_id    BigInt?
  completed_at          DateTime?          @db.DateTime
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  user                  User               @relation(fields: [user_id], references: [id])
  course                Course             @relation(fields: [course_id], references: [id])

  @@map("user_course_progress")
}

model UserChapterProgress {
  id                    BigInt             @id @default(autoincrement())
  user_id               BigInt
  chapter_id            BigInt
  completion_percentage BigInt
  is_complete           Boolean
  completed_at          DateTime?          @db.DateTime
  created_at            DateTime           @default(now()) @db.DateTime
  updated_at            DateTime           @updatedAt @db.DateTime
  
  // Relations
  user                  User               @relation(fields: [user_id], references: [id])
  chapter               Chapter            @relation(fields: [chapter_id], references: [id])

  @@map("user_chapter_progress")
}

model UserQuizAttempt {
  id                  BigInt               @id @default(autoincrement())
  user_id             BigInt
  quiz_id             BigInt
  score               Float
  passed              Boolean
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  user                User                 @relation(fields: [user_id], references: [id])
  quiz                Quiz                 @relation(fields: [quiz_id], references: [id])
  user_responses      UserResponse[]

  @@map("user_quiz_attempts")
}

model UserResponse {
  id                  BigInt               @id @default(autoincrement())
  user_id             BigInt
  attempt_id          BigInt
  question_id         BigInt
  selected_option_id  BigInt?
  written_response    String?              @db.VarChar(255)
  is_correct          Boolean
  points_awarded      BigInt
  graded_at           DateTime?            @db.DateTime
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  user                User                 @relation(fields: [user_id], references: [id])
  attempt             UserQuizAttempt      @relation(fields: [attempt_id], references: [id])
  question            Question             @relation(fields: [question_id], references: [id])
  selected_option     Option?              @relation(fields: [selected_option_id], references: [id])

  @@map("user_responses")
}

model CourseResource {
  id                  BigInt               @id @default(autoincrement())
  resource_type_id    BigInt
  course_id           BigInt
  user_id             BigInt
  resource_url        String               @db.VarChar(255)
  created_at          DateTime             @default(now()) @db.DateTime
  updated_at          DateTime             @updatedAt @db.DateTime
  
  // Relations
  course              Course               @relation(fields: [course_id], references: [id])
  user                User                 @relation(fields: [user_id], references: [id])
  resource_type       ResourceType         @relation(fields: [resource_type_id], references: [id])

  @@map("course_resources")
}

model ResourceType {
  id                  BigInt              @id @default(autoincrement())
  extension           String              @db.VarChar(60)
  created_at          DateTime            @default(now()) @db.DateTime
  updated_at          DateTime            @updatedAt @db.DateTime

// Relations
  course_resources    CourseResource[]

  @@map("resource_types")
}